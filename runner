#!/usr/bin/env bash
#
# Copyright 2015 Peter Maloney
#
# License: Version 2 of the GNU GPL or any later version
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# dir where this script is found
libdir=$(dirname "$0")
# path to the vm conf that is to be loaded
vmconf=$(readlink -f "$1")
shift
# just the name of the vm conf; this can be overriden in the conf file
vmname=$(basename "$vmconf")

echo "libdir = \"$libdir\""
echo "vmconf = \"$vmconf\""
echo "vmname = \"$vmname\""

#+==========================================================================
# defaults
#+==========================================================================

confdir=$(dirname "$vmconf")

if [ -e "$confdir"/defaults ]; then
    . "$confdir/defaults"
elif [ -e "$libdir"/defaults ]; then
    . "$libdir/defaults"
else
    echo "WARNING: defaults file not found (in either \"$confdir\" or \"$libdir\"), so skipping loading it" >&2
fi

net_bridge_default="$net_bridge"
net_type_default="virtio"

#+==========================================================================
# functions (also usable inside the vmconf script)
#+==========================================================================

IFS=' '

cmd=()
cmd_append=()
add() {
    echo "    $@ \\"
    cmd+=("$@")
}

add_vfio() {
    device="$1"
    add -device vfio-pci,host="$device",bus=pcie.0
}

append() {
    echo "    $@ \\"
    cmd_append+=("$@")
}

#+==========================================================================
# vm settings
#+==========================================================================

if [ -f "$vmconf" ]; then
    . "$vmconf"
else
    echo "ERROR: vm \"$vmconf\" doesn't exist"
    exit 1
fi


if [ -z "$vmnickname" ]; then
    vmnickname="$vmname"
fi

#+==========================================================================
# Command Line Arguments
#+==========================================================================

dry_run=0
verbose=0
while [ "$#" != 0 ]; do
    if [ "$1" = "-n" ]; then
        shift
        dry_run=1
    elif [ "$1" = "-v" ]; then
        shift
        verbose=1
    else
        echo "ERROR: unsupported argument: \"$1\""
        exit 1
    fi
done

#+==========================================================================
# for apparmor
#+==========================================================================

apparmor() {
    path="$1"
	modes="$2"
    if [ ! -e "$path" ]; then
        # skip rbd and other things that aren't filesystem paths
        return
    fi

	if [ -z "$modes" ]; then
		# rwk is for disks
		modes="rwk"
	fi
    if [ -n "$path" ]; then
        if [ "$verbose" = 1 ]; then
            echo "DEBUG: adding apparmor rule: \"$(readlink -f "$path")\" $modes," \>\> /etc/apparmor.d/local/usr.bin.qemu-system-x86_64-"$vmname"
        fi
        echo "\"$(readlink -f "$path")\" $modes," >> /etc/apparmor.d/local/usr.bin.qemu-system-x86_64-"$vmname"
    fi
}
if [ "$verbose" = 1 ]; then
    echo "DEBUG: apparmor = ${apparmor}"
fi

if [ "$apparmor" = 1 ]; then
    # if the "all" file doesn't include this VM's profile, add that
    if ! grep "usr.bin.qemu-system-x86_64-${vmname}>$" /etc/apparmor.d/local/usr.bin.qemu-system-x86_64-all; then
        echo "#include <local/usr.bin.qemu-system-x86_64-${vmname}>" >> /etc/apparmor.d/local/usr.bin.qemu-system-x86_64-all
    fi

    # Clear this VM's profile
    echo > /etc/apparmor.d/local/usr.bin.qemu-system-x86_64-"$vmname"
fi

#+==========================================================================

echo "qemu-system-x86_64 \\"
add -enable-kvm
add -m "$ram" -M q35
if [ -n "$cpu" ]; then
    # eg. for nested virtualization on a first generation i7
    # cpu="Nehalem,+vmx"
    add -cpu "$cpu"
fi

# for backwards compat, "cpus" is assumed to mean cores
if [ -z "$cores" -a -n "$cpus" ]; then
    cores="$cpus"
fi
if [ -z "$sockets" ]; then
    sockets=1
fi
if [ -z "$threads" ]; then
    threads=1
fi
if [ -z "$maxcpus" ]; then
    maxcpus=$((cores*sockets*threads))
fi
cpus=$((cores*sockets*threads))

if [ "$baloon" = 1 ]; then
    add -device virtio-balloon-pci,id=balloon0,bus=pcie.0
fi

add -smp "${cpus},sockets=${sockets},cores=${cores},threads=${threads},maxcpus=${maxcpus}"
add -device ioh3420,bus=pcie.0,addr=1c.0,multifunction=on,port=1,chassis=1,id=root.1
add -boot menu=on

############################
# ovmf - uefi firmware
############################

if [ -z "$ovmf_dir" ]; then
    ovmf_dir="${confdir}/ovmf"
fi
if [ -z "$ovmf_code" ]; then
    ovmf_code=/usr/share/ovmf/ovmf_code_x64.bin
fi
if [ -z "$ovmf_vars" ]; then
    ovmf_vars=/usr/share/ovmf/ovmf_vars_x64.bin
fi

if [ "$ovmf" = 1 ]; then
    mkdir -p "$ovmf_dir"
    if [ ! -e "${ovmf_dir}/${vmname}-code.bin" ]; then
        cp "$ovmf_code" "${ovmf_dir}/${vmname}-code.bin"
    fi
    if [ ! -e "${ovmf_dir}/${vmname}-vars.bin" ]; then
        cp "$ovmf_vars" "${ovmf_dir}/${vmname}-vars.bin"
    fi

    add  -drive if=pflash,format=raw,readonly,file="${ovmf_dir}/${vmname}-code.bin"
    add  -drive if=pflash,format=raw,file="${ovmf_dir}/${vmname}-vars.bin"
fi

############################
# bios (such as a custom SeaBIOS file)
############################

if [ -n "$biosbin" ]; then
    if [ "$ovmf" = 1 ]; then
        echo "WARNING: ignoring biosbin=\"${biosbin}\" when ovmf is enabled."
        biosbin=
    else
        add -bios "$biosbin"
    fi
fi

############################
# gpu
############################

if [ -n "$vgaPci" ]; then
    # ==========================
    # video (this one must be the first passthrough device or maybe it won't work)
    # ==========================

    if [ -n "$romFile" ] && [ ! -s "$romFile" ]; then
        # If you don't check, qemu will happily run without the rom file... in the case of my hardware, this means risking hanging the machine
        # -s means "FILE exists and has a size greater than zero"
        echo "Can't find rom file \"$romFile\"... aborting."
        exit 1
    fi

    add -vga none

    vga_args="host="$vgaPci",multifunction=on,x-vga=on"

    if [ -n "$romFile" ]; then
        vga_args="${vga_args},romfile=${romFile}"
    fi
    if [ -z "$vga_pci_add_bus" -o "$vga_pci_add_bus" != 0 ]; then
        # if unset, or set to 0, we add the bus,addr stuff
        # this seems to be needed on windows for good performance
        # and works fine on an HD 6770, but on my board and an R7 260X, it only works in linux without this
        vga_args="${vga_args},bus=root.1,addr=0.0"
    fi
    
    add -device "vfio-pci,${vga_args}"
fi

# ==========================
# sound
# ==========================

if [ -n "$soundhw" ]; then
    add -soundhw "$soundhw"
fi

#=============================
# usb
#=============================

# support adding usb devices from the qemu monitor
add -usb

#=============================
# disks TODO: change it to be more like the network stuff
#=============================

nextIndex=0
disknum=0

virtio_bus_added=0
virtio_scsi_bus_added=0

add_virtio_bus() {
    if [ "$virtio_bus_added" = 0 ]; then
        add -device ahci,bus=pcie.0,id=ahci
        virtio_bus_added=1
    fi
}

add_virtio_scsi_bus() {
    if [ "$virtio_scsi_bus_added" = 0 ]; then
        add -device virtio-scsi-pci,id=scsi
        virtio_scsi_bus_added=1
    fi
}

IFS=$'\n'
for diskname in $(set | awk -F= '$1 ~ /^disk[0-9]+_file$/ {print $0}' | grep -Eo "^disk[0-9]+" | sort -u); do
    diskN_file=$(set | awk -F= -v name="$diskname" '$1 == name "_file"' | cut -d'=' -f2- | sed -r "s|^'(.*)'$|\1|")
    diskN_format=$(set | awk -F= -v name="$diskname" '$1 == name "_format" {print $2}')
    diskN_type=$(set | awk -F= -v name="$diskname" '$1 == name "_type" {print $2}')
    diskN_cache=$(set | awk -F= -v name="$diskname" '$1 == name "_cache" {print $2}')

#    echo "DEBUG: file = $diskN_file, format = $diskN_format, type = $diskN_type"

    if [ -n "$diskN_file" ]; then
        if [ ! -e "$diskN_file" -a -e "$img_path"/"$diskN_file" ]; then
            diskN_file="$img_path"/"$diskN_file"
        fi
        if grep -q "^rbd:" <<< "$diskN_file"; then
#            echo "DEBUG: found good rbd disk"
            true
        elif [ ! -e "$diskN_file" ]; then
            if [ "$dry_run" = 1 ]; then
                echo "WARNING: disk1_file \"$diskN_file\" not found" >&2
            else
                echo "ERROR: disk1_file \"$diskN_file\" not found" >&2
                exit 2;
            fi
        fi
    fi
    if [ -z "$diskN_format" ]; then
        if [ -n "$disk_format" ]; then
            # if set, we use the default
            diskN_format="$disk_format"
        else
            # if no default set, we just assume raw for special, qcow2 otherwise
            if file $(readlink -f /dev/data/win7a) | grep -q "block special"; then
                diskN_format=raw
            else
                diskN_format=qcow2
            fi
        fi
    fi

    # apply defaults
    if [ -z "$diskN_type" ]; then
        if [ -n "$disk_type" ]; then
            diskN_type="$disk_type"
        elif [ -n "$drive_type" ]; then
            diskN_type="$drive_type"
        else
            diskN_type=ide
        fi
    fi

    if [ -z "$diskN_cache" ]; then
        if [ -n "$disk_cache" ]; then
            diskN_cache="$disk_cache"
        else
            diskN_cache=writeback
        fi
    fi

    if [ "$apparmor" = 1 ]; then
        # add the required files to this VM's profile
        apparmor "$diskN_file"
    fi

    if [ "$diskN_type" = "virtio" ]; then
        add_virtio_bus
    fi
    if [ "$diskN_type" = "virtio-scsi" ]; then
        add_virtio_scsi_bus
    fi

    if [ "$diskN_type" = "ide" ]; then
        #IDE disks
        #  new ... works in manjaro, intended to work with multiple disks
        add -drive file=${diskN_file},id=${diskname},format=${diskN_format},index=${nextIndex},media=disk,discard=on,cache=${diskN_cache}
        let nextIndex++
    elif [ "$diskN_type" = "virtio" ]; then
        #virtio disks
        if [ -n "$diskN_file" ]; then
            add -drive file=${diskN_file},id=${diskname},format=${diskN_format},index=${nextIndex},media=disk,if=virtio,discard=on,cache=${diskN_cache}
            let nextIndex++
        fi
    elif [ "$diskN_type" = "virtio-scsi" ]; then
        #virtio disks
        if [ -n "$diskN_file" ]; then
            add -device scsi-hd,drive=${diskname}
            add -drive file=${diskN_file},id=${diskname},format=${diskN_format},index=${nextIndex},media=disk,if=none,discard=on,cache=${diskN_cache}
            let nextIndex++
        fi
    else
        echo "ERROR: unsupported disk type \"$diskN_type\""
        exit 2
    fi
    let disknum++
done

#=============================
# cd files
#=============================

IFS=$'\n'
for cdname in $(set | awk -F= '$1 ~ /^cd[0-9]+_file$/ {print $0}' | grep -Eo "^cd[0-9]+" | sort -u); do
    cdN_file=$(set | awk -F= -v name="$cdname" '$1 == name "_file" {print $2}' | sed -r "s|^'(.*)'$|\1|")
    cdN_type=$(set | awk -F= -v name="$cdname" '$1 == name "_type" {print $2}')

    if [ -n "$cdN_file" ]; then
        if [ ! -e "$cdN_file" -a -e "$cd_path"/"$cdN_file" ]; then
            cdN_file="$cd_path"/"$cdN_file"
        fi
        if [ ! -e "$cdN_file" ]; then
            if [ "$dry_run" = 1 ]; then
                echo "WARNING: cdN_file \"$cdN_file\" not found" >&2
            else
                echo "ERROR: cdN_file \"$cdN_file\" not found" >&2
                exit 2
            fi
        fi
    fi

    # apply defaults
    if [ -z "$cdN_type" ]; then
        if [ -n "$cd_type" ]; then
            cdN_type="$cd_type"
        elif [ -n "$drive_type" ]; then
            cdN_type="$drive_type"
        else
            cdN_type=ide
        fi
    fi

    if [ -n "$cdN_file" ]; then
        if [ "$cdN_type" = "ide" ]; then
            add -drive file=${cdN_file},id=isocd"$nextIndex",media=cdrom,index="$nextIndex"
            let nextIndex++
        elif [ "$cdN_type" = "virtio" ]; then
            if [ "$cdN_type" = "virtio" ]; then
                add_virtio_bus
            fi
            if [ -n "$cdN_file" ]; then
                add -drive file=${cdN_file},id=isocd"$nextIndex",media=cdrom,index="$nextIndex"
                let nextIndex++
            fi
        elif [ -z "$cdN_type" -a -z "$cdN_file" ]; then
            # no cd
            echo -n
        else
            echo "ERROR: unsupported cdN_type \"$cdN_type\""
            exit 2
        fi
    fi
done

# an empty CD-ROM you can put cds in with qemu monitor (eg. change cdrom /dev/sr0)
if [ "$add_empty_cdrom" = true ]; then
    add -drive media=cdrom,id=cdrom,index="$nextIndex",media=cdrom
    let nextIndex++
fi

#=============================
# network
#=============================

IFS=$'\n'
# Parse net* (net#_bridge=xxx, net#_mac=xxx, net#_type=xxx)
# this number is used only for the qemu ids, not parsing config
netnum=0
for netname in $(set | awk -F= '$1 ~ /^net[0-9]+_(bridge|mac)$/ {print $0}' | grep -Eo "^net[0-9]+" | sort -u); do
    net_mac=$(set | awk -F= -v name="$netname" '$1 == name "_mac" {print $2}')
    net_bridge=$(set | awk -F= -v name="$netname" '$1 == name "_bridge" {print $2}')
    net_type=$(set | awk -F= -v name="$netname" '$1 == name "_type" {print $2}')

    if [ -z "$net_mac" ]; then
        # mac is optional... blank means generate one, save it to the conf file
        net_mac=$(echo "$RANDOM" | md5sum | sed -r "s/(..)(..)(..).*/4E:30:18:\1:\2:\3/")
        while grep "mac=$net_mac" "$libdir"/* >/dev/null 2>&1; do
            net_mac=$(echo "$RANDOM" | md5sum | sed -r "s/(..)(..)(..).*/4E:30:18:\1:\2:\3/")
        done

        if grep -E ".*${netname}_mac=.*" "$vmconf" >/dev/null 2>&1; then
            sed -i -r "s/.*${netname}_mac=.*/${netname}_mac=\"$net_mac\"/" "$vmconf"
        else
            echo "${netname}_mac=\"$net_mac\"" >> "$vmconf"
        fi
    fi

    # bridge is optional
    if set | grep "^${netname}_bridge=" >/dev/null 2>&1; then
        if [ -n "$net_bridge" ]; then
            ifup_script="${base_ifup_script}-${net_bridge}"
            if [ ! -e "${ifup_script}" ]; then
                sed "s/BRIDGE_NAME/$net_bridge/g" "${base_ifup_script}" > "${ifup_script}"
                chmod +rx "${ifup_script}"
            fi
            ifdown_script="${base_ifdown_script}-${net_bridge}"
            if [ ! -e "${ifdown_script}" ]; then
                sed "s/BRIDGE_NAME/$net_bridge/g" "${base_ifdown_script}" > "${ifdown_script}"
                chmod +rx "${ifdown_script}"
            fi
        else
            # blank means no bridge
            bridge_ifup_script=/bin/true
            bridge_ifdown_script=/bin/true
        fi
    elif [ -z "$net_bridge_default" ]; then
        # no bridge variable and no default means no bridge script
        ifup_script=no
        ifdown_script=no
    else
        # no bridge variable means use default
        ifup_script="${base_ifup_script}-${net_bridge_default}"
        if [ ! -e "${ifup_script}" ]; then
            sed "s/BRIDGE_NAME/$net_bridge_default/g" "${base_ifup_script}" > "${ifup_script}"
            chmod +rx "${ifup_script}"
        fi
        ifdown_script="${base_ifdown_script}-${net_bridge_default}"
        if [ ! -e "${ifdown_script}" ]; then
            sed "s/BRIDGE_NAME/$net_bridge_default/g" "${base_ifdown_script}" > "${ifdown_script}"
            chmod +rx "${ifdown_script}"
        fi
    fi

    if [ -z "$net_type" ]; then
        net_type="$net_type_default"
    fi

    if [ "$net_type" = "e1000" ]; then
        # emulated Intel network
        netDevice=e1000
    elif [ "$net_type" = "rtl8139" ]; then
        # emulated Realtek network
        netDevice=rtl8139
    elif [ "$net_type" = "virtio" ]; then
        # virtio network
        netDevice=virtio-net-pci
    else
        echo "ERROR: unsupported net_type \"$net_type\""
        exit 2
    fi

    #shorten the ifname (max 15 characters)
    ifname="$vmnickname-$netname"
    shortenedName="$vmnickname"
    while [ "${#ifname}" -ge 15 ]; do
        shortenedName=${shortenedName:0:-1}
        ifname="$shortenedName-$netname"
    done

    # TODO: make sure this name is unique
    # maybe just give up on names and use numbers
    # or just make sure names are short and be limited in how many nics to have (short name = filename, long name = ?)

    addr=$((12+netnum))
    add -netdev type=tap,id=net"$netnum",ifname="$ifname",script=${ifup_script},downscript=${ifdown_script}
    add -device "$netDevice",mac="$net_mac",netdev=net"$netnum"
    let netnum++
done

if [ "$netnum" != 0 ]; then
    # not sure why, but since 2016-12-29, tun isn't loaded automatically; I ran updates before that, but not for kernel.
    modprobe tun
fi

#=============================
# monitor
#=============================

#telnet monitor
#add -monitor telnet:localhost:7100,server,nowait,nodelay

#stdio monitor
add -monitor stdio

#=============================
# GUI
# vnc, spice, or default (which is an X11 window)
#=============================

if [ -n "$vgaPci" -o "$vgaType" = "vnc" ]; then
    #vnc
	if [ -z "$vncport" ]; then
		vncport=0
	fi
    add -vnc :"$vncport"
elif [ "$vgaType" = "spice" ]; then
    #spice:
    add -vga qxl -spice port=5900,addr=127.0.0.1,disable-ticketing 
elif [ -n "$vgaType" ]; then
    # std,qxl,cirrus,etc.
    add -vga "$vgaType"
else
    if [ -z "$DISPLAY" ]; then
        echo "No X display... enabling VNC"
        add -vnc :"$vncport"
    else
        # otherwise the qemu default is cirrus, but let's change it to vmware
        add -vga "vmware"
    fi
fi

#=============================
# apparmor
#=============================

if [ "$apparmor" = 1 ]; then
    #TODO: support more diskN_file and cdN_file here
    apparmor "$disk1_file"
    apparmor "$disk2_file"
    apparmor "$isovirtiowin"

    if [ -n "$cd1_file" ]; then
        apparmor "$cd1_file"
    fi
    if [ -n "$biosbin" ]; then
        apparmor "$biosbin"
    fi
    if [ -n "$romFile" ]; then
        apparmor "$romFile"
    fi

# TODO: automatically generate the bridge profile too? it's not just a single line... it has its own executables it uses too
#	apparmor "$ifup_script" rix
#	apparmor "$ifdown_script" rix

    # apply the policy (to all VMs)
    if [ "$dry_run" != 1 ]; then
        aa-enforce /etc/apparmor.d/usr.bin.qemu-system-x86_64
    fi
fi

#=============================

if [ "$verbose" = 1 ]; then
    printf "qemu-system-x86_64 "
    for arg in "${cmd[@]}" "${cmd_append[@]}"; do
        if [ "${arg:0:1}" = "-" ]; then
            printf '\\\n    '"${arg} "
        else
            printf "$arg "
        fi
    done
fi
if [ "$dry_run" != 1 ]; then
    qemu-system-x86_64 "${cmd[@]}" "${cmd_append[@]}"
    status=$?
fi

exit $status

